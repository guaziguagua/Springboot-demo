# 服务名字
spring.application.name=sharding-jdbc-demo

spring.profiles.active=dev

  # 服务器配置
spring.shardingsphere.datasource.names=server-user,server-order0,server-order1

  # 服务器1
spring.shardingsphere.datasource.server-user.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.server-user.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.server-user.jdbc-url=jdbc:mysql://107.174.90.8:3301/db_user
spring.shardingsphere.datasource.server-user.username=root
spring.shardingsphere.datasource.server-user.password=123456

  # 数据库2
spring.shardingsphere.datasource.server-order0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.server-order0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.server-order0.jdbc-url=jdbc:mysql://107.174.90.8:3310/db_order
spring.shardingsphere.datasource.server-order0.username=root
spring.shardingsphere.datasource.server-order0.password=123456

  # 数据库3
spring.shardingsphere.datasource.server-order1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.server-order1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.server-order1.jdbc-url=jdbc:mysql://107.174.90.8:3311/db_order
spring.shardingsphere.datasource.server-order1.username=root
spring.shardingsphere.datasource.server-order1.password=123456

  # ?????????????actual-data-nodes ?????????????????????
  # spring.shardingsphere.rules.sharding.tables.<table-name>.actual-data-nodes=?
  # ?????? + ????????????
  # <table-name>?????
spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes=server-user.t_user 
# 这是一种简单的表达式，就是逗号分割，但是不好用，加入100个服务器，就不好用了
spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=server-order$->{0..1}.t_order$->{0..1}
# 导入关联表的跨库
spring.shardingsphere.rules.sharding.tables.t_order_item.actual-data-nodes=server-order$->{0..1}.t_order_item$->{0..1}
# 使用inlin表达式表达多个节点 order$->{0..1} 这就是order0 和 order1   0..6 就是一个范围   还可以{[1,6]}枚举来实现

# ------------------------------------分库配置，选择对什么逻辑表进行分库
# 分片列名称
#根据user_id.分片
spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column=user_id
# 分片算法名称
spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name=alg_hash_mod


# -----------------------------------导入关联表的分库配置
spring.shardingsphere.rules.sharding.tables.t_order_item.database-strategy.standard.sharding-column=user_id
# 分片算法名称
spring.shardingsphere.rules.sharding.tables.t_order_item.database-strategy.standard.sharding-algorithm-name=alg_hash_mod



#----------------------------------分库分片算法配置
# 行表达式分片算法,我是用INLINE这个算法会报错，没事儿，都差不多，哈希取模也是可以用的
# 分片算法类型  alg_inline_userid 分片算法的名称，是自己取得 需要与sharding-algorithm-name  一致
#spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.type=INLINE
## 分片算法属性配置
#spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.props.algorithm-expression=server-order$->{user_id % 2}

#------------------------分库 分片算法配置
# 哈希取模分片算法    还有个普通取模算法，不走hash，，，如果string类型必须哈希取模
# 分片算法类型
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash_mod.type=HASH_MOD
# 分片算法属性配置
spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash_mod.props.sharding-count=2






#-----------------------------------分表策略配置，database-strategy 改成 table-strategy
#根据user_id.分片
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=order_no
# 分片算法名称
spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=alg_hash_mod
#根据order_id.分片
#spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column=order_no
## 分片算法名称，下面写具体的分片算法实现
#spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name=alg_hash_mod

# -------------------------------------导入关联表的分表配置
# 分片列名称
spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-column=order_no
# 分片算法名称
spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-algorithm-name=alg_hash_mod


  # 输出SQL
spring.shardingsphere.props.sql-show=true







#------------------------分布式序列策略配置,依旧需要指定逻辑表t_order的序列主键是id
# 分布式序列列名称
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column=id
# 分布式序列算法名称
spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name=alg_snowflake
# 分布式序列算法类型，alg_snowflake就是这个算法的名字了
spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.type=SNOWFLAKE
# 分布式序列算法属性配置，如果这个值不是分片值，这个属性就不配置了。我们的分片是userid分库，order id分表
#spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.props.xxx=


#------------------------关联表的分布式序列策略配置
# 分布式序列列名称
spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.column=id
# 分布式序列算法名称
spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.key-generator-name=alg_snowflake



#-----------------------绑定表配置
# `绑定表：`指分片规则一致的一组分片表。 使用绑定表进行多表关联查询时，必须使用**分片键**进行关联，否则会出现笛卡尔积关联或跨库关联，从而影响查询效率。
# 所以这里查询没有使用order id，就是从order表获得order id ，然后去另外一个表查询，因为order——id不是分片键，我们用的order-no
spring.shardingsphere.rules.sharding.binding-tables[0]=t_order,t_order_item





#----------------------------广播表配置
# 将dict表的节点定义为所有的表
spring.shardingsphere.rules.sharding.tables.t_dict.actual-data-nodes=server-user.t_dict,server-order$->{0..1}.t_dict
# 广播表规则列表
spring.shardingsphere.rules.sharding.broadcast-tables[0]=t_dict
